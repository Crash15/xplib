<?xml version="1.0" encoding="utf-8"?>
<nodeSet version="1.0">
  <view uin="436kw10s7ep_v">
    <property name="$defaultDiagram" value="true" />
    <property name="$metaclass" value="Package Diagram" />
    <property name="$name" value="default" />
    <reference referencedUin="delphi:e_class:src:XPLibD14:XPFiles.EFileException">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.EFileException.Create(System.Integer)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:XPLibD14:XPFiles.TXPFileIterator">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFileIterator.FileIterator(ref@System.string,ref@SysUtils.TSearchRec)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:XPLibD14:XPFiles.TFileCollector">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:XPLibD14:XPFiles.TFileCollector:XPFiles.TXPFileIterator" />
      <reference referencedUin="delphi:e_field:src:XPLibD14:XPFiles.TFileCollector.FSize" />
      <reference referencedUin="delphi:e_field:src:XPLibD14:XPFiles.TFileCollector.FList" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TFileCollector.SetList(Classes.TStrings)" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TFileCollector.Create()" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TFileCollector.Destroy()" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TFileCollector.Reset()" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TFileCollector.FileIterator(ref@System.string,ref@SysUtils.TSearchRec)" />
      <reference referencedUin="delphi:e_property:src:XPLibD14:XPFiles.TFileCollector.List" />
      <reference referencedUin="delphi:e_property:src:XPLibD14:XPFiles.TFileCollector.Size" />
    </reference>
    <reference referencedUin="delphi:e_class:src:XPLibD14:XPFiles.TXPFile">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_field:src:XPLibD14:XPFiles.TXPFile.FPathname" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFile.GetCanonicalPathname()" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFile.GetCanRead()" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFile.GetCanWrite()" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFile.GetExists()" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFile.GetIsAbsolute()" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFile.GetIsDirectory()" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFile.GetIsFile()" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFile.GetIsHidden()" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFile.SetIsHidden(System.Boolean)" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFile.GetLastModified()" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFile.SetLastModified(System.TDateTime)" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFile.GetSize()" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFile.Create(System.string)" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFile.Create(System.string,System.string)" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFile.Create(XPFiles.TXPFile,System.string)" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFile.CompareTo(System.string)" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFile.Delete()" />
      <reference referencedUin="delphi:e_property:src:XPLibD14:XPFiles.TXPFile.CanonicalPathname" />
      <reference referencedUin="delphi:e_property:src:XPLibD14:XPFiles.TXPFile.CanRead" />
      <reference referencedUin="delphi:e_property:src:XPLibD14:XPFiles.TXPFile.CanWrite" />
      <reference referencedUin="delphi:e_property:src:XPLibD14:XPFiles.TXPFile.Exists" />
      <reference referencedUin="delphi:e_property:src:XPLibD14:XPFiles.TXPFile.IsAbsolute" />
      <reference referencedUin="delphi:e_property:src:XPLibD14:XPFiles.TXPFile.IsDirectory" />
      <reference referencedUin="delphi:e_property:src:XPLibD14:XPFiles.TXPFile.IsFile" />
      <reference referencedUin="delphi:e_property:src:XPLibD14:XPFiles.TXPFile.IsHidden" />
      <reference referencedUin="delphi:e_property:src:XPLibD14:XPFiles.TXPFile.LastModified" />
      <reference referencedUin="delphi:e_property:src:XPLibD14:XPFiles.TXPFile.Pathname" />
      <reference referencedUin="delphi:e_property:src:XPLibD14:XPFiles.TXPFile.Size" />
    </reference>
    <reference referencedUin="delphi:e_class:src:XPLibD14:XPFiles.TXPDirectory">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:XPLibD14:XPFiles.TXPDirectory:XPFiles.TXPFile" />
      <reference referencedUin="delphi:e_field:src:XPLibD14:XPFiles.TXPDirectory.FIsRecursive" />
      <reference referencedUin="delphi:e_field:src:XPLibD14:XPFiles.TXPDirectory.FExcludeVirtualDirs" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPDirectory.EnumFiles(XPFiles.TXPFileIterator,System.string)" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPDirectory.GetSize()" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPDirectory.DoFileEnumeration(XPFiles.TXPFileIterator,ref@System.string,ref@SysUtils.TSearchRec)" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPDirectory.FilterFile(SysUtils.TSearchRec)" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPDirectory.CreateNew(ref@XPFiles.TXPDirectory)" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPDirectory.Create(System.string)" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPDirectory.Delete()" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPDirectory.List(Classes.TStrings)" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPDirectory.EnumFiles(XPFiles.TXPFileIterator)" />
      <reference referencedUin="delphi:e_property:src:XPLibD14:XPFiles.TXPDirectory.IsRecursive" />
      <reference referencedUin="delphi:e_property:src:XPLibD14:XPFiles.TXPDirectory.ExcludeVirtualDirs" />
    </reference>
    <reference referencedUin="delphi:e_class:src:XPLibD14:XPFiles.TXPFilteredDirectory">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:XPLibD14:XPFiles.TXPFilteredDirectory:XPFiles.TXPDirectory" />
      <reference referencedUin="delphi:e_field:src:XPLibD14:XPFiles.TXPFilteredDirectory.FIncludedAttrs" />
      <reference referencedUin="delphi:e_field:src:XPLibD14:XPFiles.TXPFilteredDirectory.FExcludedAttrs" />
      <reference referencedUin="delphi:e_field:src:XPLibD14:XPFiles.TXPFilteredDirectory.FIncludedMasks" />
      <reference referencedUin="delphi:e_field:src:XPLibD14:XPFiles.TXPFilteredDirectory.FExcludedMasks" />
      <reference referencedUin="delphi:e_field:src:XPLibD14:XPFiles.TXPFilteredDirectory.FIncludedMaskList" />
      <reference referencedUin="delphi:e_field:src:XPLibD14:XPFiles.TXPFilteredDirectory.FExcludedMaskList" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFilteredDirectory.UpdateIncludeMasks(System.TObject)" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFilteredDirectory.UpdateExcludeMasks(System.TObject)" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFilteredDirectory.GetSize()" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFilteredDirectory.FilterFile(SysUtils.TSearchRec)" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFilteredDirectory.CreateNew(ref@XPFiles.TXPDirectory)" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFilteredDirectory.Create(System.string)" />
      <reference referencedUin="delphi:e_method:src:XPLibD14:XPFiles.TXPFilteredDirectory.Destroy()" />
      <reference referencedUin="delphi:e_property:src:XPLibD14:XPFiles.TXPFilteredDirectory.IncludedAttrs" />
      <reference referencedUin="delphi:e_property:src:XPLibD14:XPFiles.TXPFilteredDirectory.ExcludedAttrs" />
      <reference referencedUin="delphi:e_property:src:XPLibD14:XPFiles.TXPFilteredDirectory.IncludedMasks" />
      <reference referencedUin="delphi:e_property:src:XPLibD14:XPFiles.TXPFilteredDirectory.ExcludedMasks" />
    </reference>
    <reference referencedUin="delphi:e_class:src:XPLibD14:XPFiles.@unitclass">
      <property name="$shortcutReference" value="true" />
    </reference>
  </view>
</nodeSet>