<?xml version="1.0" encoding="utf-8"?>
<nodeSet version="1.0">
  <view uin="ydkg6f4rjks_v">
    <property name="$defaultDiagram" value="true" />
    <property name="$metaclass" value="Package Diagram" />
    <property name="$name" value="default" />
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.ICollection&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.ICollection&lt;1&gt;.GetCount()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.ICollection&lt;1&gt;.Empty()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.ICollection&lt;1&gt;.Single()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.ICollection&lt;1&gt;.SingleOrDefault(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.ICollection&lt;1&gt;.CopyTo(ref@T[])" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.ICollection&lt;1&gt;.CopyTo(ref@T[],System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.ICollection&lt;1&gt;.ToArray()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.ICollection&lt;1&gt;.ToFixedArray()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.ICollection&lt;1&gt;.ToDynamicArray()" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Base.ICollection&lt;1&gt;.Count" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexExtOps&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexExtOps&lt;1&gt;.FType" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexExtOps&lt;1&gt;.FInstance" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexExtOps&lt;1&gt;.FKeepAlive" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexExtOps&lt;1&gt;.Select&lt;1&gt;(DeHL.Collections.Base.TEnexExtOps`1.Select.TFunc,DeHL.Types.IType&lt;TOut&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexExtOps&lt;1&gt;.Select&lt;1&gt;(DeHL.Collections.Base.TEnexExtOps`1.Select.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexExtOps&lt;1&gt;.Select&lt;1&gt;()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexExtOps&lt;1&gt;.Cast&lt;1&gt;(DeHL.Types.IType&lt;TOut&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexExtOps&lt;1&gt;.Cast&lt;1&gt;()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;:DeHL.Collections.Base.ICollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.EqualsTo(DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.ToList()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.ToSet()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.Max()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.Min()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.First()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.FirstOrDefault(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.Last()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.LastOrDefault(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.Aggregate(DeHL.Collections.Base.IEnexCollection`1.Aggregate.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.AggregateOrDefault(DeHL.Collections.Base.IEnexCollection`1.AggregateOrDefault.TFunc,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.ElementAt(System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.ElementAtOrDefault(System.NativeUInt,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.Any(DeHL.Collections.Base.IEnexCollection`1.Any.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.All(DeHL.Collections.Base.IEnexCollection`1.All.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.Where(DeHL.Collections.Base.IEnexCollection`1.Where.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.WhereLower(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.WhereLowerOrEqual(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.WhereGreater(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.WhereGreaterOrEqual(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.WhereBetween(T,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.Distinct()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.Sorted(System.Boolean)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.Sorted(DeHL.Types.TCompareOverride&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.Reversed()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.Concat(DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.Union(DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.Exclude(DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.Intersect(DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.Range(System.NativeUInt,System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.Take(System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.TakeWhile(DeHL.Collections.Base.IEnexCollection`1.TakeWhile.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.TakeWhileLower(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.TakeWhileLowerOrEqual(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.TakeWhileGreater(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.TakeWhileGreaterOrEqual(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.TakeWhileBetween(T,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.Skip(System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.SkipWhile(DeHL.Collections.Base.IEnexCollection`1.SkipWhile.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.SkipWhileLower(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.SkipWhileLowerOrEqual(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.SkipWhileGreater(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.SkipWhileGreaterOrEqual(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.SkipWhileBetween(T,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexCollection&lt;1&gt;.Op()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.IEnexIndexedCollection&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.IEnexIndexedCollection&lt;1&gt;:DeHL.Collections.Base.IEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexIndexedCollection&lt;1&gt;.GetItem(System.NativeUInt)" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Base.IEnexIndexedCollection&lt;1&gt;.Items[System.NativeUInt]" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.Values" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.Keys" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;:DeHL.Collections.Base.ICollection&lt;DeHL.Tuples.KVPair&lt;TKey,TValue&gt;&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.ToDictionary()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.ValueForKey(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.KeyHasValue(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.MaxKey()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.MinKey()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.MaxValue()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.MinValue()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.SelectKeys()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.SelectValues()" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.Keys" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.Values" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.DistinctByKeys()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.DistinctByValues()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.Includes(DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.Where(DeHL.Collections.Base.IEnexAssociativeCollection`2.Where.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.WhereKeyLower(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.WhereKeyLowerOrEqual(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.WhereKeyGreater(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.WhereKeyGreaterOrEqual(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.WhereKeyBetween(TKey,TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.WhereValueLower(TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.WhereValueLowerOrEqual(TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.WhereValueGreater(TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.WhereValueGreaterOrEqual(TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;.WhereValueBetween(TValue,TValue)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.IStack&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.IStack&lt;1&gt;:DeHL.Collections.Base.IEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IStack&lt;1&gt;.Clear()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IStack&lt;1&gt;.Push(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IStack&lt;1&gt;.Pop()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IStack&lt;1&gt;.Peek()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IStack&lt;1&gt;.Remove(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IStack&lt;1&gt;.Contains(T)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.IQueue&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.IQueue&lt;1&gt;:DeHL.Collections.Base.IEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IQueue&lt;1&gt;.Clear()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IQueue&lt;1&gt;.Enqueue(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IQueue&lt;1&gt;.Dequeue()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IQueue&lt;1&gt;.Peek()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IQueue&lt;1&gt;.Contains(T)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.IPriorityQueue&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.IPriorityQueue&lt;2&gt;:DeHL.Collections.Base.IEnexAssociativeCollection&lt;TPriority,TValue&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IPriorityQueue&lt;2&gt;.Clear()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IPriorityQueue&lt;2&gt;.Enqueue(TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IPriorityQueue&lt;2&gt;.Enqueue(TValue,TPriority)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IPriorityQueue&lt;2&gt;.Dequeue()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IPriorityQueue&lt;2&gt;.Peek()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IPriorityQueue&lt;2&gt;.Contains(TValue)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.ISet&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.ISet&lt;1&gt;:DeHL.Collections.Base.IEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.ISet&lt;1&gt;.Clear()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.ISet&lt;1&gt;.Add(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.ISet&lt;1&gt;.Remove(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.ISet&lt;1&gt;.Contains(T)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.IBag&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.IBag&lt;1&gt;:DeHL.Collections.Base.IEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IBag&lt;1&gt;.Clear()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IBag&lt;1&gt;.Add(T,System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IBag&lt;1&gt;.Remove(T,System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IBag&lt;1&gt;.RemoveAll(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IBag&lt;1&gt;.Contains(T,System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IBag&lt;1&gt;.GetItemCount(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IBag&lt;1&gt;.SetItemCount(T,System.NativeUInt)" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Base.IBag&lt;1&gt;.Counts[T]" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.IMap&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.IMap&lt;2&gt;:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IMap&lt;2&gt;.Clear()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IMap&lt;2&gt;.Add(DeHL.Tuples.KVPair&lt;2&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IMap&lt;2&gt;.Add(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IMap&lt;2&gt;.Remove(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IMap&lt;2&gt;.ContainsKey(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IMap&lt;2&gt;.ContainsValue(TValue)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.IDictionary&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.IDictionary&lt;2&gt;:DeHL.Collections.Base.IMap&lt;2&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IDictionary&lt;2&gt;.TryGetValue(TKey,out@TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IDictionary&lt;2&gt;.GetItem(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IDictionary&lt;2&gt;.SetItem(TKey,TValue)" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Base.IDictionary&lt;2&gt;.Items[TKey]" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.ICollectionMap&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.ICollectionMap&lt;2&gt;:DeHL.Collections.Base.IMap&lt;2&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.ICollectionMap&lt;2&gt;.Remove(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.ICollectionMap&lt;2&gt;.Remove(DeHL.Tuples.KVPair&lt;2&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.ICollectionMap&lt;2&gt;.ContainsValue(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.ICollectionMap&lt;2&gt;.ContainsValue(DeHL.Tuples.KVPair&lt;2&gt;)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.IBidiMap&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.IBidiMap&lt;2&gt;.ByValues[TValue]" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.IBidiMap&lt;2&gt;.ByKeys[TKey]" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.IBidiMap&lt;2&gt;:DeHL.Collections.Base.IMap&lt;2&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IBidiMap&lt;2&gt;.RemoveKey(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IBidiMap&lt;2&gt;.RemoveValue(TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IBidiMap&lt;2&gt;.Remove(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IBidiMap&lt;2&gt;.Remove(DeHL.Tuples.KVPair&lt;2&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IBidiMap&lt;2&gt;.ContainsPair(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IBidiMap&lt;2&gt;.ContainsPair(DeHL.Tuples.KVPair&lt;2&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IBidiMap&lt;2&gt;.GetValueList(TKey)" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Base.IBidiMap&lt;2&gt;.ByKeys[TKey]" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IBidiMap&lt;2&gt;.GetKeyList(TValue)" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Base.IBidiMap&lt;2&gt;.ByValues[TValue]" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.IMultiMap&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.IMultiMap&lt;2&gt;.Items[TKey]" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.IMultiMap&lt;2&gt;:DeHL.Collections.Base.ICollectionMap&lt;2&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IMultiMap&lt;2&gt;.GetItemList(TKey)" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Base.IMultiMap&lt;2&gt;.Items[TKey]" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IMultiMap&lt;2&gt;.TryGetValues(TKey,out@DeHL.Collections.Base.IEnexIndexedCollection&lt;TValue&gt;)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.IDistinctMultiMap&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.IDistinctMultiMap&lt;2&gt;.Items[TKey]" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.IDistinctMultiMap&lt;2&gt;:DeHL.Collections.Base.ICollectionMap&lt;2&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IDistinctMultiMap&lt;2&gt;.GetItemList(TKey)" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Base.IDistinctMultiMap&lt;2&gt;.Items[TKey]" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IDistinctMultiMap&lt;2&gt;.TryGetValues(TKey,out@DeHL.Collections.Base.IEnexCollection&lt;TValue&gt;)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.IList&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.IList&lt;1&gt;:DeHL.Collections.Base.IEnexIndexedCollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IList&lt;1&gt;.Clear()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IList&lt;1&gt;.Add(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IList&lt;1&gt;.Add(DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IList&lt;1&gt;.Contains(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IList&lt;1&gt;.RemoveAt(System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IList&lt;1&gt;.Remove(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IList&lt;1&gt;.IndexOf(T,System.NativeUInt,System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IList&lt;1&gt;.IndexOf(T,System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IList&lt;1&gt;.IndexOf(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IList&lt;1&gt;.LastIndexOf(T,System.NativeUInt,System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IList&lt;1&gt;.LastIndexOf(T,System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IList&lt;1&gt;.LastIndexOf(T)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.ISortedList&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.ISortedList&lt;1&gt;:DeHL.Collections.Base.IList&lt;1&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.ISortedList&lt;1&gt;.Max()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.ISortedList&lt;1&gt;.Min()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.IDynamic">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IDynamic.GetCapacity()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IDynamic.Shrink()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.IDynamic.Grow()" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Base.IDynamic.Capacity" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnumerator&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnumerator&lt;1&gt;.GetCurrent()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnumerator&lt;1&gt;.MoveNext()" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Base.TEnumerator&lt;1&gt;.Current" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TCollection&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_impl:src:DeHL_Package:DeHL.Collections.Base.TCollection&lt;1&gt;:DeHL.Collections.Base.ICollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TCollection&lt;1&gt;.GetCount()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TCollection&lt;1&gt;.StartSerializing(DeHL.Serialization.TSerializationData)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TCollection&lt;1&gt;.EndSerializing(DeHL.Serialization.TSerializationData)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TCollection&lt;1&gt;.StartDeserializing(DeHL.Serialization.TDeserializationData)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TCollection&lt;1&gt;.EndDeserializing(DeHL.Serialization.TDeserializationData)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TCollection&lt;1&gt;.Serialize(DeHL.Serialization.TSerializationData)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TCollection&lt;1&gt;.Deserialize(DeHL.Serialization.TDeserializationData)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TCollection&lt;1&gt;.Empty()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TCollection&lt;1&gt;.Single()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TCollection&lt;1&gt;.SingleOrDefault(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TCollection&lt;1&gt;.CopyTo(ref@T[])" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TCollection&lt;1&gt;.CopyTo(ref@T[],System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TCollection&lt;1&gt;.ToArray()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TCollection&lt;1&gt;.ToFixedArray()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TCollection&lt;1&gt;.ToDynamicArray()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TCollection&lt;1&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Base.TCollection&lt;1&gt;.Count" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;:DeHL.Collections.Base.TCollection&lt;1&gt;" />
      <reference referencedUin="delphi:l_impl:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;:DeHL.Collections.Base.IEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.FElementType" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.ElementType" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.InstallType(DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.DeserializeElement(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Serialize(DeHL.Serialization.TSerializationData)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Deserialize(DeHL.Serialization.TDeserializationData)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Create()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Max()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Min()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.First()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.FirstOrDefault(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Last()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.LastOrDefault(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Aggregate(DeHL.Collections.Base.TEnexCollection`1.Aggregate.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.AggregateOrDefault(DeHL.Collections.Base.TEnexCollection`1.AggregateOrDefault.TFunc,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.ElementAt(System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.ElementAtOrDefault(System.NativeUInt,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Any(DeHL.Collections.Base.TEnexCollection`1.Any.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.All(DeHL.Collections.Base.TEnexCollection`1.All.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.EqualsTo(DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Where(DeHL.Collections.Base.TEnexCollection`1.Where.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.WhereLower(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.WhereLowerOrEqual(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.WhereGreater(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.WhereGreaterOrEqual(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.WhereBetween(T,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Distinct()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Sorted(System.Boolean)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Sorted(DeHL.Types.TCompareOverride&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Reversed()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Concat(DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Union(DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Exclude(DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Intersect(DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Range(System.NativeUInt,System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Take(System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.TakeWhile(DeHL.Collections.Base.TEnexCollection`1.TakeWhile.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.TakeWhileLower(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.TakeWhileLowerOrEqual(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.TakeWhileGreater(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.TakeWhileGreaterOrEqual(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.TakeWhileBetween(T,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Skip(System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.SkipWhile(DeHL.Collections.Base.TEnexCollection`1.SkipWhile.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.SkipWhileLower(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.SkipWhileLowerOrEqual(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.SkipWhileGreater(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.SkipWhileGreaterOrEqual(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.SkipWhileBetween(T,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Op()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.ToList()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.ToSet()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Fill(T,System.NativeUInt,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Fill(T,System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Interval(T,T,T,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Interval(T,T,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Interval(T,T,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCollection&lt;1&gt;.Interval(T,T)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;:DeHL.Collections.Base.TCollection&lt;DeHL.Tuples.KVPair&lt;TKey,TValue&gt;&gt;" />
      <reference referencedUin="delphi:l_impl:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.FKeyType" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.FValueType" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.KeyType" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.ValueType" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.InstallTypes(DeHL.Types.IType&lt;TKey&gt;,DeHL.Types.IType&lt;TValue&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.DeserializePair(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.Serialize(DeHL.Serialization.TSerializationData)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.Deserialize(DeHL.Serialization.TDeserializationData)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.ValueForKey(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.KeyHasValue(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.MaxKey()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.MinKey()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.MaxValue()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.MinValue()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.Includes(DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.SelectKeys()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.SelectValues()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.DistinctByKeys()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.DistinctByValues()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.Where(DeHL.Collections.Base.TEnexAssociativeCollection`2.Where.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.WhereKeyLower(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.WhereKeyLowerOrEqual(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.WhereKeyGreater(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.WhereKeyGreaterOrEqual(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.WhereKeyBetween(TKey,TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.WhereValueLower(TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.WhereValueLowerOrEqual(TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.WhereValueGreater(TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.WhereValueGreaterOrEqual(TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.WhereValueBetween(TValue,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;.ToDictionary()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexWhereCollection&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexWhereCollection&lt;1&gt;:DeHL.Collections.Base.TEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexWhereCollection&lt;1&gt;.FEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexWhereCollection&lt;1&gt;.FDeleteEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexWhereCollection&lt;1&gt;.FEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexWhereCollection&lt;1&gt;.FPredicate" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexWhereCollection&lt;1&gt;.Create(DeHL.Collections.Base.TEnexCollection&lt;1&gt;,DeHL.Collections.Base.TEnexWhereCollection`1.Create.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexWhereCollection&lt;1&gt;.CreateIntf(DeHL.Base.IEnumerable`1,DeHL.Collections.Base.TEnexWhereCollection`1.CreateIntf.TFunc,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexWhereCollection&lt;1&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexWhereCollection&lt;1&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexWhereCollection&lt;1&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectCollection&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectCollection&lt;2&gt;:DeHL.Collections.Base.TEnexCollection&lt;TOut&gt;" />
      <reference referencedUin="delphi:l_impl:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectCollection&lt;2&gt;:DeHL.Collections.Base.IEnexCollection&lt;TOut&gt;" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectCollection&lt;2&gt;.FEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectCollection&lt;2&gt;.FDeleteEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectCollection&lt;2&gt;.FEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectCollection&lt;2&gt;.FSelector" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectCollection&lt;2&gt;.GetCount()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectCollection&lt;2&gt;.Create(DeHL.Collections.Base.TEnexCollection&lt;1&gt;,DeHL.Collections.Base.TEnexSelectCollection`2.Create.TFunc,DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectCollection&lt;2&gt;.CreateIntf(DeHL.Base.IEnumerable`1,DeHL.Collections.Base.TEnexSelectCollection`2.CreateIntf.TFunc,DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectCollection&lt;2&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectCollection&lt;2&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectCollection&lt;2&gt;.Empty()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectCollection&lt;2&gt;.First()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectCollection&lt;2&gt;.Last()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectCollection&lt;2&gt;.Single()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectCollection&lt;2&gt;.ElementAt(System.NativeUInt)" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectCollection&lt;2&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectClassCollection&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectClassCollection&lt;2&gt;.FEnum" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectClassCollection&lt;2&gt;:DeHL.Collections.Base.TEnexCollection&lt;TOut&gt;" />
      <reference referencedUin="delphi:l_impl:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectClassCollection&lt;2&gt;:DeHL.Collections.Base.IEnexCollection&lt;TOut&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectClassCollection&lt;2&gt;.FDeleteEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectClassCollection&lt;2&gt;.FEnum" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectClassCollection&lt;2&gt;.Create(DeHL.Collections.Base.TEnexCollection&lt;1&gt;,DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectClassCollection&lt;2&gt;.CreateIntf(DeHL.Base.IEnumerable`1,DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectClassCollection&lt;2&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectClassCollection&lt;2&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectClassCollection&lt;2&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexCastCollection&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexCastCollection&lt;2&gt;.FEnum" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexCastCollection&lt;2&gt;:DeHL.Collections.Base.TEnexCollection&lt;TOut&gt;" />
      <reference referencedUin="delphi:l_impl:src:DeHL_Package:DeHL.Collections.Base.TEnexCastCollection&lt;2&gt;:DeHL.Collections.Base.IEnexCollection&lt;TOut&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexCastCollection&lt;2&gt;.FDeleteEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexCastCollection&lt;2&gt;.FEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexCastCollection&lt;2&gt;.FConverter" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCastCollection&lt;2&gt;.GetCount()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCastCollection&lt;2&gt;.Create(DeHL.Collections.Base.TEnexCollection&lt;1&gt;,DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCastCollection&lt;2&gt;.CreateIntf(DeHL.Base.IEnumerable`1,DeHL.Types.IType&lt;1&gt;,DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCastCollection&lt;2&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCastCollection&lt;2&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCastCollection&lt;2&gt;.Empty()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCastCollection&lt;2&gt;.First()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCastCollection&lt;2&gt;.Last()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCastCollection&lt;2&gt;.Single()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexCastCollection&lt;2&gt;.ElementAt(System.NativeUInt)" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexCastCollection&lt;2&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexConcatCollection&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexConcatCollection&lt;1&gt;.FEnum2" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexConcatCollection&lt;1&gt;.FEnum1" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexConcatCollection&lt;1&gt;:DeHL.Collections.Base.TEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexConcatCollection&lt;1&gt;.FEnum1" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexConcatCollection&lt;1&gt;.FEnum2" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexConcatCollection&lt;1&gt;.FDeleteEnum1" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexConcatCollection&lt;1&gt;.FDeleteEnum2" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexConcatCollection&lt;1&gt;.GetCount()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexConcatCollection&lt;1&gt;.Create(DeHL.Collections.Base.TEnexCollection&lt;1&gt;,DeHL.Collections.Base.TEnexCollection&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexConcatCollection&lt;1&gt;.CreateIntf(DeHL.Base.IEnumerable`1,DeHL.Base.IEnumerable`1,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexConcatCollection&lt;1&gt;.CreateIntf2(DeHL.Collections.Base.TEnexCollection&lt;1&gt;,DeHL.Base.IEnumerable`1,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexConcatCollection&lt;1&gt;.CreateIntf1(DeHL.Base.IEnumerable`1,DeHL.Collections.Base.TEnexCollection&lt;1&gt;,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexConcatCollection&lt;1&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexConcatCollection&lt;1&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexConcatCollection&lt;1&gt;.Empty()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexConcatCollection&lt;1&gt;.Any(DeHL.Collections.Base.TEnexConcatCollection`1.Any.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexConcatCollection&lt;1&gt;.All(DeHL.Collections.Base.TEnexConcatCollection`1.All.TFunc)" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexConcatCollection&lt;1&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexUnionCollection&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexUnionCollection&lt;1&gt;.FEnum2" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexUnionCollection&lt;1&gt;.FEnum1" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexUnionCollection&lt;1&gt;:DeHL.Collections.Base.TEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexUnionCollection&lt;1&gt;.FEnum1" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexUnionCollection&lt;1&gt;.FEnum2" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexUnionCollection&lt;1&gt;.FDeleteEnum1" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexUnionCollection&lt;1&gt;.FDeleteEnum2" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexUnionCollection&lt;1&gt;.Create(DeHL.Collections.Base.TEnexCollection&lt;1&gt;,DeHL.Collections.Base.TEnexCollection&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexUnionCollection&lt;1&gt;.CreateIntf(DeHL.Base.IEnumerable`1,DeHL.Base.IEnumerable`1,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexUnionCollection&lt;1&gt;.CreateIntf2(DeHL.Collections.Base.TEnexCollection&lt;1&gt;,DeHL.Base.IEnumerable`1,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexUnionCollection&lt;1&gt;.CreateIntf1(DeHL.Base.IEnumerable`1,DeHL.Collections.Base.TEnexCollection&lt;1&gt;,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexUnionCollection&lt;1&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexUnionCollection&lt;1&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexUnionCollection&lt;1&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexExclusionCollection&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexExclusionCollection&lt;1&gt;.FEnum2" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexExclusionCollection&lt;1&gt;.FEnum1" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexExclusionCollection&lt;1&gt;:DeHL.Collections.Base.TEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexExclusionCollection&lt;1&gt;.FEnum1" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexExclusionCollection&lt;1&gt;.FEnum2" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexExclusionCollection&lt;1&gt;.FDeleteEnum1" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexExclusionCollection&lt;1&gt;.FDeleteEnum2" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexExclusionCollection&lt;1&gt;.Create(DeHL.Collections.Base.TEnexCollection&lt;1&gt;,DeHL.Collections.Base.TEnexCollection&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexExclusionCollection&lt;1&gt;.CreateIntf(DeHL.Base.IEnumerable`1,DeHL.Base.IEnumerable`1,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexExclusionCollection&lt;1&gt;.CreateIntf2(DeHL.Collections.Base.TEnexCollection&lt;1&gt;,DeHL.Base.IEnumerable`1,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexExclusionCollection&lt;1&gt;.CreateIntf1(DeHL.Base.IEnumerable`1,DeHL.Collections.Base.TEnexCollection&lt;1&gt;,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexExclusionCollection&lt;1&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexExclusionCollection&lt;1&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexExclusionCollection&lt;1&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexIntersectionCollection&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexIntersectionCollection&lt;1&gt;.FEnum2" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexIntersectionCollection&lt;1&gt;.FEnum1" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexIntersectionCollection&lt;1&gt;:DeHL.Collections.Base.TEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexIntersectionCollection&lt;1&gt;.FEnum1" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexIntersectionCollection&lt;1&gt;.FEnum2" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexIntersectionCollection&lt;1&gt;.FDeleteEnum1" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexIntersectionCollection&lt;1&gt;.FDeleteEnum2" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexIntersectionCollection&lt;1&gt;.Create(DeHL.Collections.Base.TEnexCollection&lt;1&gt;,DeHL.Collections.Base.TEnexCollection&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexIntersectionCollection&lt;1&gt;.CreateIntf(DeHL.Base.IEnumerable`1,DeHL.Base.IEnumerable`1,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexIntersectionCollection&lt;1&gt;.CreateIntf2(DeHL.Collections.Base.TEnexCollection&lt;1&gt;,DeHL.Base.IEnumerable`1,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexIntersectionCollection&lt;1&gt;.CreateIntf1(DeHL.Base.IEnumerable`1,DeHL.Collections.Base.TEnexCollection&lt;1&gt;,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexIntersectionCollection&lt;1&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexIntersectionCollection&lt;1&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexIntersectionCollection&lt;1&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexDistinctCollection&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexDistinctCollection&lt;1&gt;.FEnum" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexDistinctCollection&lt;1&gt;:DeHL.Collections.Base.TEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexDistinctCollection&lt;1&gt;.FEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexDistinctCollection&lt;1&gt;.FDeleteEnum" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexDistinctCollection&lt;1&gt;.Create(DeHL.Collections.Base.TEnexCollection&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexDistinctCollection&lt;1&gt;.CreateIntf(DeHL.Base.IEnumerable`1,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexDistinctCollection&lt;1&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexDistinctCollection&lt;1&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexDistinctCollection&lt;1&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexRangeCollection&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexRangeCollection&lt;1&gt;.FEnum" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexRangeCollection&lt;1&gt;:DeHL.Collections.Base.TEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexRangeCollection&lt;1&gt;.FStart" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexRangeCollection&lt;1&gt;.FEnd" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexRangeCollection&lt;1&gt;.FEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexRangeCollection&lt;1&gt;.FDeleteEnum" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexRangeCollection&lt;1&gt;.Create(DeHL.Collections.Base.TEnexCollection&lt;1&gt;,System.NativeUInt,System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexRangeCollection&lt;1&gt;.CreateIntf(DeHL.Base.IEnumerable`1,System.NativeUInt,System.NativeUInt,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexRangeCollection&lt;1&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexRangeCollection&lt;1&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexRangeCollection&lt;1&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipCollection&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipCollection&lt;1&gt;.FEnum" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipCollection&lt;1&gt;:DeHL.Collections.Base.TEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipCollection&lt;1&gt;.FCount" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipCollection&lt;1&gt;.FEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipCollection&lt;1&gt;.FDeleteEnum" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipCollection&lt;1&gt;.Create(DeHL.Collections.Base.TEnexCollection&lt;1&gt;,System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipCollection&lt;1&gt;.CreateIntf(DeHL.Base.IEnumerable`1,System.NativeUInt,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipCollection&lt;1&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipCollection&lt;1&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipCollection&lt;1&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeCollection&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeCollection&lt;1&gt;.FEnum" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeCollection&lt;1&gt;:DeHL.Collections.Base.TEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeCollection&lt;1&gt;.FCount" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeCollection&lt;1&gt;.FEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeCollection&lt;1&gt;.FDeleteEnum" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeCollection&lt;1&gt;.Create(DeHL.Collections.Base.TEnexCollection&lt;1&gt;,System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeCollection&lt;1&gt;.CreateIntf(DeHL.Base.IEnumerable`1,System.NativeUInt,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeCollection&lt;1&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeCollection&lt;1&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeCollection&lt;1&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;:DeHL.Collections.Base.TEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.FElement" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.FCount" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.GetCount()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.Create(T,System.NativeUInt,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.Empty()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.Max()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.Min()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.First()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.FirstOrDefault(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.Last()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.LastOrDefault(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.Single()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.SingleOrDefault(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.Aggregate(DeHL.Collections.Base.TEnexFillCollection`1.Aggregate.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.AggregateOrDefault(DeHL.Collections.Base.TEnexFillCollection`1.AggregateOrDefault.TFunc,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.ElementAt(System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.ElementAtOrDefault(System.NativeUInt,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.Any(DeHL.Collections.Base.TEnexFillCollection`1.Any.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.All(DeHL.Collections.Base.TEnexFillCollection`1.All.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.EqualsTo(DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexFillCollection&lt;1&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexIntervalCollection&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexIntervalCollection&lt;1&gt;:DeHL.Collections.Base.TEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexIntervalCollection&lt;1&gt;.FLower" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexIntervalCollection&lt;1&gt;.FHigher" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexIntervalCollection&lt;1&gt;.FIncrement" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexIntervalCollection&lt;1&gt;.Create(T,T,T,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexIntervalCollection&lt;1&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexIntervalCollection&lt;1&gt;.Empty()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexIntervalCollection&lt;1&gt;.Min()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexIntervalCollection&lt;1&gt;.First()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexIntervalCollection&lt;1&gt;.FirstOrDefault(T)" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexIntervalCollection&lt;1&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeWhileCollection&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeWhileCollection&lt;1&gt;.FEnum" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeWhileCollection&lt;1&gt;:DeHL.Collections.Base.TEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeWhileCollection&lt;1&gt;.FDeleteEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeWhileCollection&lt;1&gt;.FEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeWhileCollection&lt;1&gt;.FPredicate" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeWhileCollection&lt;1&gt;.Create(DeHL.Collections.Base.TEnexCollection&lt;1&gt;,DeHL.Collections.Base.TEnexTakeWhileCollection`1.Create.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeWhileCollection&lt;1&gt;.CreateIntf(DeHL.Base.IEnumerable`1,DeHL.Collections.Base.TEnexTakeWhileCollection`1.CreateIntf.TFunc,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeWhileCollection&lt;1&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeWhileCollection&lt;1&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexTakeWhileCollection&lt;1&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipWhileCollection&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipWhileCollection&lt;1&gt;:DeHL.Collections.Base.TEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipWhileCollection&lt;1&gt;.FEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipWhileCollection&lt;1&gt;.FDeleteEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipWhileCollection&lt;1&gt;.FEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipWhileCollection&lt;1&gt;.FPredicate" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipWhileCollection&lt;1&gt;.Create(DeHL.Collections.Base.TEnexCollection&lt;1&gt;,DeHL.Collections.Base.TEnexSkipWhileCollection`1.Create.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipWhileCollection&lt;1&gt;.CreateIntf(DeHL.Base.IEnumerable`1,DeHL.Collections.Base.TEnexSkipWhileCollection`1.CreateIntf.TFunc,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipWhileCollection&lt;1&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipWhileCollection&lt;1&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexSkipWhileCollection&lt;1&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexWrapCollection&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexWrapCollection&lt;1&gt;:DeHL.Collections.Base.TEnexCollection&lt;1&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexWrapCollection&lt;1&gt;.FEnum" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexWrapCollection&lt;1&gt;.Create(DeHL.Base.IEnumerable`1,DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexWrapCollection&lt;1&gt;.GetEnumerator()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeWrapCollection&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeWrapCollection&lt;2&gt;:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;" />
      <reference referencedUin="delphi:l_impl:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeWrapCollection&lt;2&gt;:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeWrapCollection&lt;2&gt;.FEnum" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeWrapCollection&lt;2&gt;.Create(DeHL.Base.IEnumerable`1,DeHL.Types.IType&lt;TKey&gt;,DeHL.Types.IType&lt;TValue&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeWrapCollection&lt;2&gt;.GetEnumerator()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectKeysCollection&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectKeysCollection&lt;2&gt;.FEnum" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectKeysCollection&lt;2&gt;:DeHL.Collections.Base.TEnexCollection&lt;TKey&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectKeysCollection&lt;2&gt;.FDeleteEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectKeysCollection&lt;2&gt;.FEnum" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectKeysCollection&lt;2&gt;.GetCount()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectKeysCollection&lt;2&gt;.Create(DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectKeysCollection&lt;2&gt;.CreateIntf(DeHL.Base.IEnumerable`1,DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType,DeHL.Types.IType&lt;TValue&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectKeysCollection&lt;2&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectKeysCollection&lt;2&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectKeysCollection&lt;2&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectValuesCollection&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectValuesCollection&lt;2&gt;.FEnum" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectValuesCollection&lt;2&gt;:DeHL.Collections.Base.TEnexCollection&lt;TValue&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectValuesCollection&lt;2&gt;.FDeleteEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectValuesCollection&lt;2&gt;.FEnum" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectValuesCollection&lt;2&gt;.GetCount()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectValuesCollection&lt;2&gt;.Create(DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectValuesCollection&lt;2&gt;.CreateIntf(DeHL.Base.IEnumerable`1,DeHL.Types.IType&lt;TKey&gt;,DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectValuesCollection&lt;2&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectValuesCollection&lt;2&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexSelectValuesCollection&lt;2&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeWhereCollection&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeWhereCollection&lt;2&gt;.FEnum" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeWhereCollection&lt;2&gt;:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;" />
      <reference referencedUin="delphi:l_impl:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeWhereCollection&lt;2&gt;:DeHL.Collections.Base.IEnexAssociativeCollection&lt;2&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeWhereCollection&lt;2&gt;.FDeleteEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeWhereCollection&lt;2&gt;.FEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeWhereCollection&lt;2&gt;.FPredicate" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeWhereCollection&lt;2&gt;.Create(DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;,DeHL.Collections.Base.TEnexAssociativeWhereCollection`2.Create.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeWhereCollection&lt;2&gt;.CreateIntf(DeHL.Base.IEnumerable`1,DeHL.Collections.Base.TEnexAssociativeWhereCollection`2.CreateIntf.TFunc,DeHL.Types.IType&lt;TKey&gt;,DeHL.Types.IType&lt;TValue&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeWhereCollection&lt;2&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeWhereCollection&lt;2&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeWhereCollection&lt;2&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByKeysCollection&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByKeysCollection&lt;2&gt;.FEnum" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByKeysCollection&lt;2&gt;:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByKeysCollection&lt;2&gt;.FDeleteEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByKeysCollection&lt;2&gt;.FEnum" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByKeysCollection&lt;2&gt;.Create(DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByKeysCollection&lt;2&gt;.CreateIntf(DeHL.Base.IEnumerable`1,DeHL.Types.IType&lt;TKey&gt;,DeHL.Types.IType&lt;TValue&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByKeysCollection&lt;2&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByKeysCollection&lt;2&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByKeysCollection&lt;2&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByValuesCollection&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByValuesCollection&lt;2&gt;.FEnum" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByValuesCollection&lt;2&gt;:DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByValuesCollection&lt;2&gt;.FDeleteEnum" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByValuesCollection&lt;2&gt;.FEnum" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByValuesCollection&lt;2&gt;.Create(DeHL.Collections.Base.TEnexAssociativeCollection&lt;2&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByValuesCollection&lt;2&gt;.CreateIntf(DeHL.Base.IEnumerable`1,DeHL.Types.IType&lt;TKey&gt;,DeHL.Types.IType&lt;TValue&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByValuesCollection&lt;2&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByValuesCollection&lt;2&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.TEnexAssociativeDistinctByValuesCollection&lt;2&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Base.@unitclass">
      <property name="$shortcutReference" value="true" />
    </reference>
  </view>
</nodeSet>