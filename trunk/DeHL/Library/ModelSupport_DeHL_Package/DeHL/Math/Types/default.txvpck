<?xml version="1.0" encoding="utf-8"?>
<nodeSet version="1.0">
  <view uin="7gytm6vuayh_v">
    <property name="$defaultDiagram" value="true" />
    <property name="$metaclass" value="Package Diagram" />
    <property name="$name" value="default" />
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.IMathExtension&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.IMathExtension&lt;1&gt;.Add(T,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.IMathExtension&lt;1&gt;.Subtract(T,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.IMathExtension&lt;1&gt;.Multiply(T,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.IMathExtension&lt;1&gt;.Zero()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.IMathExtension&lt;1&gt;.One()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.IUnsignedIntegerMathExtension&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.IUnsignedIntegerMathExtension&lt;1&gt;:DeHL.Math.Types.IMathExtension&lt;1&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.IUnsignedIntegerMathExtension&lt;1&gt;.IntegralDivide(T,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.IUnsignedIntegerMathExtension&lt;1&gt;.Modulo(T,T)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.IIntegerMathExtension&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.IIntegerMathExtension&lt;1&gt;:DeHL.Math.Types.IUnsignedIntegerMathExtension&lt;1&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.IIntegerMathExtension&lt;1&gt;.Negate(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.IIntegerMathExtension&lt;1&gt;.Abs(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.IIntegerMathExtension&lt;1&gt;.MinusOne()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.IRealMathExtension&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.IRealMathExtension&lt;1&gt;:DeHL.Math.Types.IMathExtension&lt;1&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.IRealMathExtension&lt;1&gt;.Divide(T,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.IRealMathExtension&lt;1&gt;.Negate(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.IRealMathExtension&lt;1&gt;.Abs(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.IRealMathExtension&lt;1&gt;.MinusOne()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.TMathExtension">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Math.Types.TMathExtension.FExtender" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.TMathExtensionClass">
      <property name="$shortcutReference" value="true" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.TMathExtension&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.TMathExtension&lt;1&gt;:DeHL.Math.Types.TMathExtension" />
      <reference referencedUin="delphi:l_impl:src:DeHL_Package:DeHL.Math.Types.TMathExtension&lt;1&gt;:DeHL.Math.Types.IMathExtension&lt;1&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TMathExtension&lt;1&gt;.Add(T,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TMathExtension&lt;1&gt;.Subtract(T,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TMathExtension&lt;1&gt;.Multiply(T,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TMathExtension&lt;1&gt;.Zero()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TMathExtension&lt;1&gt;.One()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TMathExtension&lt;1&gt;.Common(DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TMathExtension&lt;1&gt;.Common()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TMathExtension&lt;1&gt;.Natural(DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TMathExtension&lt;1&gt;.Natural()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TMathExtension&lt;1&gt;.Integer(DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TMathExtension&lt;1&gt;.Integer()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TMathExtension&lt;1&gt;.Real(DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TMathExtension&lt;1&gt;.Real()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TMathExtension&lt;1&gt;.Register(DeHL.Math.Types.TMathExtensionClass)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TMathExtension&lt;1&gt;.Unregister()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.TUnsignedIntegerMathExtension&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.TUnsignedIntegerMathExtension&lt;1&gt;:DeHL.Math.Types.TMathExtension&lt;1&gt;" />
      <reference referencedUin="delphi:l_impl:src:DeHL_Package:DeHL.Math.Types.TUnsignedIntegerMathExtension&lt;1&gt;:DeHL.Math.Types.IUnsignedIntegerMathExtension&lt;1&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TUnsignedIntegerMathExtension&lt;1&gt;.IntegralDivide(T,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TUnsignedIntegerMathExtension&lt;1&gt;.Modulo(T,T)" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.TRealMathExtension&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.TRealMathExtension&lt;1&gt;:DeHL.Math.Types.TMathExtension&lt;1&gt;" />
      <reference referencedUin="delphi:l_impl:src:DeHL_Package:DeHL.Math.Types.TRealMathExtension&lt;1&gt;:DeHL.Math.Types.IRealMathExtension&lt;1&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TRealMathExtension&lt;1&gt;.Divide(T,T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TRealMathExtension&lt;1&gt;.Negate(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TRealMathExtension&lt;1&gt;.Abs(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TRealMathExtension&lt;1&gt;.MinusOne()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.TIntegerMathExtension&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.TIntegerMathExtension&lt;1&gt;:DeHL.Math.Types.TUnsignedIntegerMathExtension&lt;1&gt;" />
      <reference referencedUin="delphi:l_impl:src:DeHL_Package:DeHL.Math.Types.TIntegerMathExtension&lt;1&gt;:DeHL.Math.Types.IIntegerMathExtension&lt;1&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TIntegerMathExtension&lt;1&gt;.Negate(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TIntegerMathExtension&lt;1&gt;.Abs(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TIntegerMathExtension&lt;1&gt;.MinusOne()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.TByteMathExtension">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.TByteMathExtension:DeHL.Math.Types.TUnsignedIntegerMathExtension&lt;System.Byte&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TByteMathExtension.Add(System.Byte,System.Byte)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TByteMathExtension.Subtract(System.Byte,System.Byte)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TByteMathExtension.Multiply(System.Byte,System.Byte)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TByteMathExtension.IntegralDivide(System.Byte,System.Byte)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TByteMathExtension.Modulo(System.Byte,System.Byte)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TByteMathExtension.Zero()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TByteMathExtension.One()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.TShortIntMathExtension">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.TShortIntMathExtension:DeHL.Math.Types.TIntegerMathExtension&lt;System.Shortint&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TShortIntMathExtension.Add(System.Shortint,System.Shortint)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TShortIntMathExtension.Subtract(System.Shortint,System.Shortint)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TShortIntMathExtension.Multiply(System.Shortint,System.Shortint)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TShortIntMathExtension.IntegralDivide(System.Shortint,System.Shortint)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TShortIntMathExtension.Modulo(System.Shortint,System.Shortint)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TShortIntMathExtension.Negate(System.Shortint)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TShortIntMathExtension.Abs(System.Shortint)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TShortIntMathExtension.Zero()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TShortIntMathExtension.One()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TShortIntMathExtension.MinusOne()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.TWordMathExtension">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.TWordMathExtension:DeHL.Math.Types.TUnsignedIntegerMathExtension&lt;System.Word&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TWordMathExtension.Add(System.Word,System.Word)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TWordMathExtension.Subtract(System.Word,System.Word)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TWordMathExtension.Multiply(System.Word,System.Word)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TWordMathExtension.IntegralDivide(System.Word,System.Word)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TWordMathExtension.Modulo(System.Word,System.Word)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TWordMathExtension.Zero()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TWordMathExtension.One()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.TSmallIntMathExtension">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.TSmallIntMathExtension:DeHL.Math.Types.TIntegerMathExtension&lt;System.Smallint&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TSmallIntMathExtension.Add(System.Smallint,System.Smallint)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TSmallIntMathExtension.Subtract(System.Smallint,System.Smallint)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TSmallIntMathExtension.Multiply(System.Smallint,System.Smallint)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TSmallIntMathExtension.IntegralDivide(System.Smallint,System.Smallint)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TSmallIntMathExtension.Modulo(System.Smallint,System.Smallint)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TSmallIntMathExtension.Negate(System.Smallint)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TSmallIntMathExtension.Abs(System.Smallint)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TSmallIntMathExtension.Zero()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TSmallIntMathExtension.One()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TSmallIntMathExtension.MinusOne()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.TCardinalMathExtension">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.TCardinalMathExtension:DeHL.Math.Types.TUnsignedIntegerMathExtension&lt;System.Cardinal&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCardinalMathExtension.Add(System.Cardinal,System.Cardinal)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCardinalMathExtension.Subtract(System.Cardinal,System.Cardinal)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCardinalMathExtension.Multiply(System.Cardinal,System.Cardinal)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCardinalMathExtension.IntegralDivide(System.Cardinal,System.Cardinal)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCardinalMathExtension.Modulo(System.Cardinal,System.Cardinal)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCardinalMathExtension.Zero()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCardinalMathExtension.One()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.TIntegerMathExtension">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.TIntegerMathExtension:DeHL.Math.Types.TIntegerMathExtension&lt;System.Integer&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TIntegerMathExtension.Add(System.Integer,System.Integer)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TIntegerMathExtension.Subtract(System.Integer,System.Integer)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TIntegerMathExtension.Multiply(System.Integer,System.Integer)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TIntegerMathExtension.IntegralDivide(System.Integer,System.Integer)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TIntegerMathExtension.Modulo(System.Integer,System.Integer)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TIntegerMathExtension.Negate(System.Integer)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TIntegerMathExtension.Abs(System.Integer)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TIntegerMathExtension.Zero()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TIntegerMathExtension.One()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TIntegerMathExtension.MinusOne()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.TUInt64MathExtension">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.TUInt64MathExtension:DeHL.Math.Types.TUnsignedIntegerMathExtension&lt;System.UInt64&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TUInt64MathExtension.Add(System.UInt64,System.UInt64)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TUInt64MathExtension.Subtract(System.UInt64,System.UInt64)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TUInt64MathExtension.Multiply(System.UInt64,System.UInt64)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TUInt64MathExtension.IntegralDivide(System.UInt64,System.UInt64)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TUInt64MathExtension.Modulo(System.UInt64,System.UInt64)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TUInt64MathExtension.Zero()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TUInt64MathExtension.One()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.TInt64MathExtension">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.TInt64MathExtension:DeHL.Math.Types.TIntegerMathExtension&lt;System.Int64&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TInt64MathExtension.Add(System.Int64,System.Int64)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TInt64MathExtension.Subtract(System.Int64,System.Int64)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TInt64MathExtension.Multiply(System.Int64,System.Int64)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TInt64MathExtension.IntegralDivide(System.Int64,System.Int64)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TInt64MathExtension.Modulo(System.Int64,System.Int64)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TInt64MathExtension.Negate(System.Int64)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TInt64MathExtension.Abs(System.Int64)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TInt64MathExtension.Zero()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TInt64MathExtension.One()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TInt64MathExtension.MinusOne()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.TSingleMathExtension">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.TSingleMathExtension:DeHL.Math.Types.TRealMathExtension&lt;System.Single&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TSingleMathExtension.Add(System.Single,System.Single)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TSingleMathExtension.Subtract(System.Single,System.Single)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TSingleMathExtension.Multiply(System.Single,System.Single)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TSingleMathExtension.Divide(System.Single,System.Single)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TSingleMathExtension.Negate(System.Single)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TSingleMathExtension.Abs(System.Single)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TSingleMathExtension.Zero()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TSingleMathExtension.One()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TSingleMathExtension.MinusOne()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.TDoubleMathExtension">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.TDoubleMathExtension:DeHL.Math.Types.TRealMathExtension&lt;System.Double&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TDoubleMathExtension.Add(System.Double,System.Double)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TDoubleMathExtension.Subtract(System.Double,System.Double)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TDoubleMathExtension.Multiply(System.Double,System.Double)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TDoubleMathExtension.Divide(System.Double,System.Double)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TDoubleMathExtension.Negate(System.Double)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TDoubleMathExtension.Abs(System.Double)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TDoubleMathExtension.Zero()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TDoubleMathExtension.One()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TDoubleMathExtension.MinusOne()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.TExtendedMathExtension">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.TExtendedMathExtension:DeHL.Math.Types.TRealMathExtension&lt;System.Extended&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TExtendedMathExtension.Add(System.Extended,System.Extended)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TExtendedMathExtension.Subtract(System.Extended,System.Extended)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TExtendedMathExtension.Multiply(System.Extended,System.Extended)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TExtendedMathExtension.Divide(System.Extended,System.Extended)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TExtendedMathExtension.Negate(System.Extended)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TExtendedMathExtension.Abs(System.Extended)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TExtendedMathExtension.Zero()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TExtendedMathExtension.One()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TExtendedMathExtension.MinusOne()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.TCurrencyMathExtension">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.TCurrencyMathExtension:DeHL.Math.Types.TRealMathExtension&lt;System.Currency&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCurrencyMathExtension.Add(System.Currency,System.Currency)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCurrencyMathExtension.Subtract(System.Currency,System.Currency)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCurrencyMathExtension.Multiply(System.Currency,System.Currency)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCurrencyMathExtension.Divide(System.Currency,System.Currency)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCurrencyMathExtension.Negate(System.Currency)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCurrencyMathExtension.Abs(System.Currency)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCurrencyMathExtension.Zero()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCurrencyMathExtension.One()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCurrencyMathExtension.MinusOne()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.TCompMathExtension">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_gnt:src:DeHL_Package:DeHL.Math.Types.TCompMathExtension:DeHL.Math.Types.TRealMathExtension&lt;System.Comp&gt;" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCompMathExtension.Add(System.Comp,System.Comp)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCompMathExtension.Subtract(System.Comp,System.Comp)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCompMathExtension.Multiply(System.Comp,System.Comp)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCompMathExtension.Divide(System.Comp,System.Comp)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCompMathExtension.Negate(System.Comp)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCompMathExtension.Abs(System.Comp)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCompMathExtension.Zero()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCompMathExtension.One()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Math.Types.TCompMathExtension.MinusOne()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Math.Types.@unitclass">
      <property name="$shortcutReference" value="true" />
    </reference>
  </view>
</nodeSet>