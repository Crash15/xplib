<?xml version="1.0" encoding="utf-8"?>
<nodeSet version="1.0">
  <view uin="9x6flk0mr0f_v">
    <property name="$defaultDiagram" value="true" />
    <property name="$metaclass" value="Package Diagram" />
    <property name="$name" value="default" />
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.FVer" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.FKnownCount" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.FKeyCollection" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.FValueCollection" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.FDictionary" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Dictionary" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.GetCount()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.GetItemList(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.CreateDictionary(DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.CreateList(DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Create()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Create(DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Create(DeHL.Tuples.KVPair&lt;2&gt;[])" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Create(DeHL.Collections.Base.TCollection`1.TDynamicArray`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Create(DeHL.Collections.Base.TCollection`1.TDynamicArray`1.TFixedArray`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Create(DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType,DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Create(DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType,DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType,DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Create(DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType,DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType,DeHL.Tuples.KVPair&lt;2&gt;[])" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Create(DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType,DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType,DeHL.Collections.Base.TCollection`1.TDynamicArray`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Create(DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType,DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType,DeHL.Collections.Base.TCollection`1.TDynamicArray`1.TFixedArray`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Clear()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Add(DeHL.Tuples.KVPair&lt;2&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Add(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Remove(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Remove(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Remove(DeHL.Tuples.KVPair&lt;2&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.ContainsKey(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.ContainsValue(TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.ContainsValue(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.ContainsValue(DeHL.Tuples.KVPair&lt;2&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.TryGetValues(TKey,out@DeHL.Collections.Base.IEnexIndexedCollection&lt;TValue&gt;)" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Items[TKey]" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Count" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Keys" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.Values" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.CopyTo(ref@DeHL.Tuples.KVPair&lt;2&gt;[])" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.CopyTo(ref@DeHL.Tuples.KVPair&lt;2&gt;[],System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.ValueForKey(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.KeyHasValue(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.SelectKeys()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.SelectValues()" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.TPairEnumerator" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.TKeyEnumerator" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.TValueEnumerator" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.TKeyCollection" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractMultiMap&lt;2&gt;.TValueCollection" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.FVer" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.FKnownCount" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.FKeyCollection" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.FValueCollection" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.FDictionary" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Dictionary" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.GetCount()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.GetItemList(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.CreateDictionary(DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.CreateSet(DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Create()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Create(DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Create(DeHL.Tuples.KVPair&lt;2&gt;[])" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Create(DeHL.Collections.Base.TCollection`1.TDynamicArray`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Create(DeHL.Collections.Base.TCollection`1.TDynamicArray`1.TFixedArray`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Create(DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType,DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Create(DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType,DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType,DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Create(DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType,DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType,DeHL.Tuples.KVPair&lt;2&gt;[])" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Create(DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType,DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType,DeHL.Collections.Base.TCollection`1.TDynamicArray`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Create(DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType,DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1.TEnexExtOps`1.FType,DeHL.Collections.Base.TCollection`1.TDynamicArray`1.TFixedArray`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Clear()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Add(DeHL.Tuples.KVPair&lt;2&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Add(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Remove(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Remove(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Remove(DeHL.Tuples.KVPair&lt;2&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.ContainsKey(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.ContainsValue(TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.ContainsValue(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.ContainsValue(DeHL.Tuples.KVPair&lt;2&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.TryGetValues(TKey,out@DeHL.Collections.Base.TEnexCollection`1.IEnexCollection`1)" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Items[TKey]" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Count" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Keys" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.Values" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.CopyTo(ref@DeHL.Tuples.KVPair&lt;2&gt;[])" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.CopyTo(ref@DeHL.Tuples.KVPair&lt;2&gt;[],System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.ValueForKey(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.KeyHasValue(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.SelectKeys()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.SelectValues()" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.TPairEnumerator" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.TKeyEnumerator" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.TValueEnumerator" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.TKeyCollection" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractDistinctMultiMap&lt;2&gt;.TValueCollection" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.FByKeyMap" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.FByValueMap" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.FValueCollection" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.FKeyCollection" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.ByKeyMap" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.ByValueMap" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.CreateKeyMap(DeHL.Types.IType&lt;TKey&gt;,DeHL.Types.IType&lt;TValue&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.CreateValueMap(DeHL.Types.IType&lt;TValue&gt;,DeHL.Types.IType&lt;TKey&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.GetCount()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.GetKeyList(TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.GetValueList(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Create()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Create(DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Create(DeHL.Tuples.KVPair&lt;2&gt;[])" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Create(DeHL.Collections.Base.TCollection`1.TDynamicArray`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Create(DeHL.Collections.Base.TCollection`1.TDynamicArray`1.TFixedArray`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Create(DeHL.Types.IType&lt;TKey&gt;,DeHL.Types.IType&lt;TValue&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Create(DeHL.Types.IType&lt;TKey&gt;,DeHL.Types.IType&lt;TValue&gt;,DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Create(DeHL.Types.IType&lt;TKey&gt;,DeHL.Types.IType&lt;TValue&gt;,DeHL.Tuples.KVPair&lt;2&gt;[])" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Create(DeHL.Types.IType&lt;TKey&gt;,DeHL.Types.IType&lt;TValue&gt;,DeHL.Collections.Base.TCollection`1.TDynamicArray`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Create(DeHL.Types.IType&lt;TKey&gt;,DeHL.Types.IType&lt;TValue&gt;,DeHL.Collections.Base.TCollection`1.TDynamicArray`1.TFixedArray`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Clear()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Add(DeHL.Tuples.KVPair&lt;2&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Add(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.RemoveKey(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Remove(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.RemoveValue(TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Remove(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Remove(DeHL.Tuples.KVPair&lt;2&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.ContainsKey(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.ContainsValue(TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.ContainsPair(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.ContainsPair(DeHL.Tuples.KVPair&lt;2&gt;)" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.ByKey[TKey]" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.ByValue[TValue]" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Keys" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Values" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.Count" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.CopyTo(ref@DeHL.Tuples.KVPair&lt;2&gt;[])" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.CopyTo(ref@DeHL.Tuples.KVPair&lt;2&gt;[],System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.ValueForKey(TKey)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.KeyHasValue(TKey,TValue)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.SelectKeys()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBidiMap&lt;2&gt;.SelectValues()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.FDictionary" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.FVer" />
      <reference referencedUin="delphi:e_field:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.FKnownCount" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Dictionary" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.GetCount()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.GetItemCount(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.SetItemCount(T,System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.CreateDictionary(DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Create()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Create(DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Create(T[])" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Create(DeHL.Arrays.TDynamicArray`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Create(DeHL.Arrays.TFixedArray`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Create(DeHL.Types.IType&lt;1&gt;)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Create(DeHL.Types.IType&lt;1&gt;,DeHL.Base.IEnumerable`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Create(DeHL.Types.IType&lt;1&gt;,T[])" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Create(DeHL.Types.IType&lt;1&gt;,DeHL.Arrays.TDynamicArray`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Create(DeHL.Types.IType&lt;1&gt;,DeHL.Arrays.TFixedArray`1)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Destroy()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Clear()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Add(T,System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Remove(T,System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.RemoveAll(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Contains(T,System.NativeUInt)" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Counts[T]" />
      <reference referencedUin="delphi:e_property:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Count" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.GetEnumerator()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.CopyTo(ref@T[])" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.CopyTo(ref@T[],System.NativeUInt)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Empty()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Max()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Min()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.First()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.FirstOrDefault(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Last()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.LastOrDefault(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Single()" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.SingleOrDefault(T)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.Any(DeHL.Collections.Abstract.TAbstractBag`1.Any.TFunc)" />
      <reference referencedUin="delphi:e_method:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.All(DeHL.Collections.Abstract.TAbstractBag`1.All.TFunc)" />
      <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Abstract.TAbstractBag&lt;1&gt;.TEnumerator" />
    </reference>
    <reference referencedUin="delphi:e_class:src:DeHL_Package:DeHL.Collections.Abstract.@unitclass">
      <property name="$shortcutReference" value="true" />
    </reference>
  </view>
</nodeSet>